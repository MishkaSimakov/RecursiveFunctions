program:
    preamble declaration-seq    [program_declaration]
    declaration-seq             [program_declaration]

preamble:
    import-seq [pass<0>]

import-seq:
    import              [sequence<NodesList<ImportDecl>, ImportDecl>]
    import-seq import   [sequence<NodesList<ImportDecl>, ImportDecl>]

// basics
literal:
    string-literal [pass<0>]
    integer-literal [pass<0>]

string-literal:
    STRING [string_literal]

integer-literal:
    NUMBER [integer_literal]

// declarations
declaration-seq:
    declaration                 [sequence<NodesList<Declaration>, Declaration>]
    declaration-seq declaration [sequence<NodesList<Declaration>, Declaration>]

declaration:
    function-definition [pass<0>]

import:
    KW_IMPORT STRING SEMICOLON [module_import]

function-definition:
    specifiers IDENTIFIER COLON parameters return-type EQUAL compound-statement [function_definition]
    IDENTIFIER COLON parameters return-type EQUAL compound-statement [function_definition]

specifiers:
    KW_EXPORT [pass<0>]

parameters:
    OPEN_PAREN CLOSE_PAREN                              [construct<NodesList<ParameterDecl>>]
    OPEN_PAREN parameter-declaration-list CLOSE_PAREN   [pass<1>]

parameter-declaration-list:
    parameter-declaration                                   [sequence<NodesList<ParameterDecl>, ParameterDecl>]
    parameter-declaration-list COMMA parameter-declaration  [sequence<NodesList<ParameterDecl>, ParameterDecl>]

parameter-declaration:
    IDENTIFIER COLON type-name [parameter_declaration]

return-type:
    ARROW type-name [pass<1>]

type-name:
    KW_INT [construct<IntType>]
    KW_BOOL [construct<BoolType>]

// statements
compound-statement:
    OPEN_BRACE CLOSE_BRACE                  [construct<CompoundStmt>]
    OPEN_BRACE statement-seq CLOSE_BRACE    [pass<1>]

statement-seq:
    statement               [sequence<CompoundStmt, Statement>]
    statement-seq statement [sequence<CompoundStmt, Statement>]

statement:
    expression-statement    [pass<0>]
    jump-statement          [pass<0>]

jump-statement:
    KW_RETURN expression SEMICOLON [return_statement]

expression-statement:
    expression SEMICOLON [pass<0>]

expression-list:
    expression                          [sequence<NodesList<Expression>, Expression>]
    expression-list COMMA expression    [sequence<NodesList<Expression>, Expression>]

call-arguments:
    OPEN_PAREN CLOSE_PAREN                  [construct<NodesList<Expression>>]
    OPEN_PAREN expression-list CLOSE_PAREN  [pass<1>]

call-expression:
    IDENTIFIER call-arguments [call_expression]

primary-expression:
    literal                             [pass<0>]
    IDENTIFIER                          [id_expression]
    OPEN_PAREN expression CLOSE_PAREN   [pass<1>]
    call-expression                     [pass<0>]

multiply-expression:
    primary-expression [pass<0>]
    multiply-expression MULTIPLY primary-expression [binary_op<MULTIPLY>]

add-expression:
    multiply-expression                         [pass<0>]
    add-expression PLUS multiply-expression     [binary_op<PLUS>]
    add-expression MINUS multiply-expression    [binary_op<MINUS>]

expression:
    add-expression  [pass<0>]
