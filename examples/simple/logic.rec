# Simple logic functions
# 0 - false, 1 - true

# lets implement function that will return 1 for x >= 1 and 0 otherwise
bool_cast(0) = 0;
bool_cast(x + 1) = 1;

# "not" is also very simple
not(0) = 1;
not(x + 1) = 0;

# basic binary logical functions
or(x, 0) = x;
or(x, y + 1) = 1;

# if we have addition function
# or can be implemented like this: or(x, y) = bool_cast(add(x, y));

and(x, 0) = 0;
and(x, y + 1) = x;

# and final step - conditional function
# conditional(condition, true_branch, false_branch) should return true_branch if condition is true
# otherwise false_branch should be returned

conditional_internal(true_branch, false_branch, 0) = false_branch;
conditional_internal(true_branch, false_branch, x + 1) = true_branch;

conditional(condition, true_branch, false_branch) = conditional_internal(true_branch, false_branch, condition);

# conditional_internal function is used only to swap arguments order

# now lets calculate something interesting
conditional(and(or(1, 0), 1), 1, 0);